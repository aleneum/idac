import controlP5.*;
import ddf.minim.*;
import processing.serial.*;

import totem.comm.*;
import totem.sound.*;
import totem.graphic.*;

TPlayer player;
TSerialCommunicator communicator;

//gui stuff
ControlP5 controlp5;

//my stuff
TVisualization currentVis;
TSimpleText simpleText;

PFont myFont;

public final int INIT_GAIN = 0;
public final String VOLUME_CONTROLLER = "Volume (dB)";
public final String TENSION_CONTROLLER = "Tension (%)";
public final String INPUT_CONTROLLER = "Input (%)";
public final String DECAY_CONTROLLER = "Speed (rel)";
public final String MIC_CONTROLLER = "Mic (rel)";
public final String CROWD_CONTROLLER = "Noise (rel)";

// size of the window to show
public final int sizeX = 600;
public final int sizeY = 600;

public int gain = INIT_GAIN;
public float tension = 0;
public float crowd = 0;
public float decay = 0.5; 
public int input = 0;
public boolean showGUI=true;

int textColor = 0;

public float tensionAcc = 0;

void setup() {
  //Setup GUI
  size(sizeX, sizeY,P2D);
  controlp5 = new ControlP5(this);
  controlp5.addSlider(VOLUME_CONTROLLER,-50,50,INIT_GAIN,10,10,100,14).setId(1);
  controlp5.addSlider(INPUT_CONTROLLER,0,100,input,10,25,100,14).setId(2);
  controlp5.addSlider(DECAY_CONTROLLER,0,1,decay,10,40,100,14).setId(3);
  controlp5.addSlider(MIC_CONTROLLER,0,1,INIT_GAIN,10,55,100,14).setId(4);
  
  controlp5.addNumberbox(TENSION_CONTROLLER, tension, width-110, 10, 100,14).setId(20);
  controlp5.addSlider(CROWD_CONTROLLER, 0, 1, crowd, width-110, 25, 100,14).setId(21);

  player = new TPlayer(this,"groove.mp3");
  player.loop();
  
  currentVis = new TSquareVisualization(this);
  simpleText = new TSimpleText(this);
  
  communicator = new TSerialCommunicator(this);
  
  myFont = createFont("FFScala", 32);
  textFont(myFont);
  textAlign(CENTER);
}

void draw() {
  
  // paint everything black and repaint gui if activated
  background(0);
  fill(255);
  
  if (player.beatDetected()){
  	currentVis.draw();
  }
  if(showGUI) {
    controlp5.draw();
  }
  
  simpleText.draw(crowd);
  
  
  //TODO refactor 
  if (abs(input-tension)>0.1){
    int sig = 1;
    if ((input-tension) < 0){
      sig = -1;
    }
   if ((tensionAcc*sig) >= 0) {
     tensionAcc = sig*(abs(tensionAcc) + decay/100);
     tension  = tension + tensionAcc;
     gain = int(tension/4)-10;
     println (tensionAcc);
   } else {
     tensionAcc = 0;
   }
  }

  float inLevel = player.getInLevel();
  if (crowd < inLevel) {
    crowd += 0.005; 
  } else {
    crowd -= 0.001;
  }
  
  player.setGain(gain);
  
  controlp5.controller(VOLUME_CONTROLLER).setValue(gain);
  controlp5.controller(TENSION_CONTROLLER).setValue(tension);
  controlp5.controller(CROWD_CONTROLLER).setValue(crowd);
  controlp5.controller(INPUT_CONTROLLER).setValue(input);
  controlp5.controller(MIC_CONTROLLER).setValue(inLevel);  
}



// Event handeling below

public void controlEvent(ControlEvent theEvent) {
  //println("got a control event from controller with id "+theEvent.controller().id());
  switch(theEvent.controller().id()) {
    case(1):
      gain = (int)(theEvent.controller().value());
    break;
    case(2):
      input = (int)(theEvent.controller().value());
    break;
    case(3):
      decay = theEvent.controller().value();
    break;
    //default: println("WARNING: Unhandled control5P event!");
  }    
}

//forwarding serialEvent to communicator
void serialEvent (Serial serial){
  communicator.serialEvent(serial);
  input = int(communicator.getActivity() * 100);
}

void keyPressed() {
  if (key == 'm' || key == 'M') {
    showGUI = !showGUI;
  }
}

void stop() {
  // always close Minim audio classes when you are done with them
  player.stop();
  super.stop();
}